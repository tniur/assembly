;========================= Print one letter ==========================

_print_letter_ macro letter

    push AX
    push DX
    
    mov DL, letter
    mov AH, 02
    int 21h
    
    pop DX
    pop AX
endm

;========================== Print two bytes ===========================

_print_word_ macro src
local print_DL, print_hex, print_

    print_DL proc near
        push DX
        rcr DL,4
        call print_hex
        pop DX
        call print_hex
        ret
    print_DL endp

    print_hex proc near
        and DL, 0Fh
        add DL, 30h
        cmp DL, 3Ah
        jl print_
        add DL, 07h
        print_:
        int 21H
        ret
    print_hex endp

    push AX
    push BX
    push CX
    push DX

    mov BX, src
    mov AH, 02h
    mov DL, BH
    call print_DL
 
    mov DL, BL
    call print_DL
 
    pop DX
    pop CX
    pop BX
    pop AX
endm

;========================== Start new line ===========================

_new_line_ macro
    _print_letter_ CR
    _print_letter_ LF
endm

;========================== Print Message ============================

_print_message_ macro message
local msg, skip
    push AX
    push DX

    mov DX, offset msg
    mov AH, 09h
    int 21h

    pop DX
    pop AX

    jmp skip
    msg DB message,'$'
    skip:
endm

;========================== Print File Name ==========================

_print_file_name_ macro FileName

    push AX
    push DX
    push BX

    xor BH, BH
    mov BL, FileName[1]
    mov FileName[BX+2], '$'
    mov DX, offset FileName[2]
    mov AH, 09h
    int 21h
    mov FileName[BX+2], 0

    pop BX
    pop DX
    pop AX
endm

;======================= Read PSP Parameters =========================

_read_psp_parameters_ macro InputFile, OutputFile
local cycle_1, cycle_2, _end, parse_outputfile_name
    push DI
    push AX
    inc SI
    inc SI
    mov DI, offset InputFile[2]
    cycle_1:
        mov AL, byte ptr [SI] 
        cmp AL, Space
        je parse_outputfile_name

        mov [DI], AL
        inc SI
        inc DI
        
        jmp cycle_1
    
parse_outputfile_name:
        inc SI
        mov DI, offset OutputFile[2]
        cycle_2:
            mov AL, byte ptr [SI] 
            cmp AL, CR
            je _end

            mov [DI], AL
            inc SI
            inc DI
            
            jmp cycle_2

    _end:
    pop AX
    pop DI
endm

;============================= Read File =============================

ReadFile macro Descriptor, Buffer, Counter, RealRead
local read_error, read_success, skip
    push AX
    clc
    mov BX, Descriptor
    mov CX, Counter
    lea DX, Buffer
    mov AH, 3Fh
    int 21h
    jnc read_success
    jmp read_error  
    
    read_success:
        mov RealRead, AX
        _new_line_
        _print_message_ '*** Read Success ***'
        jmp skip
    
    read_error:
        _new_line_
        _print_message_ '!!! Read Error !!!'
    skip: 
        pop AX
endm

;============================ Write File =============================

WriteFile macro Descriptor, Buffer, Counter
local write_error, write_success, skip
    push AX
    clc
    mov BX, Descriptor
    mov CX, Counter
    lea DX, Buffer
    mov AH, 40h
    int 21h
    jnc write_success
    jmp write_error
    write_success:
        _new_line_
        _print_message_ '*** Write Success ***'
        jmp skip
    write_error:
        _new_line_
        _print_message_ '!!! Write Error !!!'
    skip:
    pop AX
endm

;============================ Close File =============================

CloseFile macro Descriptor
local close_success, close_error, skip
    push AX
    push BX
    
    clc
    mov BX, Descriptor
    mov AH, 3Eh
    jnc close_success
    jmp close_error
    
    close_success:
        _new_line_
        _print_message_ '*** Close Success ***'
        jmp skip

    close_error:
        _new_line_
        _print_message_ '!!! Close Error !!!'

    skip:
    pop BX  
    pop AX

endm

;=====================================================================