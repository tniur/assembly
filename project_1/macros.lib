;========================= Print one letter ==========================

_print_letter_ macro letter

    push AX
    push DX
    
    mov DL, letter
    mov AH, 02h
    int 21h
    
    pop DX
    pop AX
endm

;========================== Print Message ============================

_print_message_ macro message
local msg, skip
    push AX
    push DX

    mov DX, offset msg
    mov AH, 09h
    int 21h

    pop DX
    pop AX

    jmp skip
    msg DB message,'$'
    skip:
endm

;============================= Read File =============================

_read_file_ macro Descriptor, Buffer, Counter, RealRead
local read_error, read_success, skip
    push AX
    push BX
    push CX
    push DX

    clc
    mov BX, Descriptor
    mov CX, Counter
    lea DX, Buffer
    mov AH, 3Fh
    int 21h
    jnc read_success
    jmp read_error  
    
    read_success:
        mov RealRead, AX
        call new_line
        _print_message_ '*** Read Success ***'
        jmp skip
    
    read_error:
        call new_line
        _print_message_ '!!! Read Error !!!'
        jmp _end

    skip: 
        pop DX
        pop CX
        pop BX
        pop AX
endm

;============================ Write File =============================

_write_file_ macro Descriptor, Buffer, Counter
local write_error, write_success, skip
    push AX
    push BX
    push DX
    push CX

    clc
    mov BX, Descriptor
    mov CX, Counter
    lea DX, Buffer
    mov AH, 40h
    int 21h
    jnc write_success
    jmp write_error

    write_success:
        call new_line
        _print_message_ '*** Write Success ***'
        jmp skip

    write_error:
        call new_line
        _print_message_ '!!! Write Error !!!'
        jmp _end

    skip:
    pop CX
    pop DX
    pop BX
    pop AX
endm

;============================ Close File =============================

_close_file_ macro Descriptor
local close_success, close_error, skip
    push AX
    push BX
    
    clc
    mov BX, Descriptor
    mov AH, 3Eh
    jnc close_success
    jmp close_error
    
    close_success:
        call new_line
        _print_message_ '*** Close Success ***'
        jmp skip

    close_error:
        call new_line
        _print_message_ '!!! Close Error !!!'

    skip:
    pop BX  
    pop AX

endm

;=====================================================================